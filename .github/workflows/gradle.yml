name: CI

on:
  workflow_dispatch:


  push:
    branches:
      - master
      - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12.1-alpine
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: cook-we-bdd
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Check Gradlew Permissions
        run: ls -l gradlew && chmod +x gradlew

      - name: Run Gradle Tests
        run: |
          ./gradlew test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Check Gradlew Permissions
        run: ls -l gradlew && chmod +x gradlew

      - name: Build Application
        run: |
          ./gradlew build -x test -x check

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:latest  .

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.CR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: push Docker image
        run: |
          docker push ghcr.io/${{ github.repository }}:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: echo "${{ secrets.CR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run Docker Compose
        run: |
          docker-compose -f docker/docker-compose.all.yml up -d
          sleep 10
          curl -X GET "http://localhost:9001/v3/api-docs" -H "accept: application/json" -o openapi.yaml

      - name: Generate Swagger UI
        uses: Legion2/swagger-ui-action@v1
        with:
          spec-file: openapi.yaml
          output: swagger-ui
          GITHUB_TOKEN: ${{ secrets.CR_TOKEN2 }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.CR_TOKEN2 }}
          publish_dir: swagger-ui
